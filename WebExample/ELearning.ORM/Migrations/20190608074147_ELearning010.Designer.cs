// <auto-generated />
using System;
using ELearning.ORM.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ELearning.ORM.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    [Migration("20190608074147_ELearning010")]
    partial class ELearning010
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ELearning.Entities.Common.BusinessFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AttachmentTimeUploaded");

                    b.Property<byte[]>("BinaryContent");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<long>("FileSize");

                    b.Property<string>("IconString")
                        .HasMaxLength(120);

                    b.Property<bool>("IsInDB");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(500);

                    b.Property<Guid>("RelevanceObjectID");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<string>("UploadFileSuffix")
                        .HasMaxLength(10);

                    b.Property<string>("UploadPath")
                        .HasMaxLength(500);

                    b.Property<Guid>("UploaderID");

                    b.HasKey("Id");

                    b.ToTable("BusinessFiles");
                });

            modelBuilder.Entity("ELearning.Entities.Common.BusinessImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100);

                    b.Property<long>("FileSize");

                    b.Property<int>("Height");

                    b.Property<string>("IconString")
                        .HasMaxLength(120);

                    b.Property<bool>("IsForTitle");

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(256);

                    b.Property<Guid>("RelevanceObjectID");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<string>("UploadFileSuffix")
                        .HasMaxLength(256);

                    b.Property<string>("UploadPath")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UploadedTime");

                    b.Property<Guid>("UploaderID");

                    b.Property<int>("Width");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.ToTable("BusinessImages");
                });

            modelBuilder.Entity("ELearning.Entities.Common.BusinessVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AttachmentTimeUploaded");

                    b.Property<byte[]>("BinaryContent");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<long>("FileSize");

                    b.Property<string>("IconString")
                        .HasMaxLength(120);

                    b.Property<bool>("IsInDB");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(500);

                    b.Property<Guid>("RelevanceObjectID");

                    b.Property<string>("SortCode")
                        .HasMaxLength(250);

                    b.Property<string>("UploadFileSuffix")
                        .HasMaxLength(10);

                    b.Property<string>("UploadPath")
                        .HasMaxLength(500);

                    b.Property<Guid>("UploaderID");

                    b.HasKey("Id");

                    b.ToTable("BusinessVideos");
                });

            modelBuilder.Entity("ELearning.Entities.News.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleContent");

                    b.Property<string>("ArticleSecondTitle")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleSource")
                        .HasMaxLength(250);

                    b.Property<int>("ArticleStatus");

                    b.Property<DateTime>("CloseDate");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("CreatorUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsOriented");

                    b.Property<bool>("IsPassed");

                    b.Property<bool>("IsPublishedByHtml");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("OpenDate");

                    b.Property<DateTime>("PublishDate");

                    b.Property<Guid>("RelevanceObjectID");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<int>("SourceType");

                    b.Property<int>("UpVoteNumber");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CommentDate");

                    b.Property<Guid?>("CommentWritorId");

                    b.Property<string>("Description")
                        .HasMaxLength(10000);

                    b.Property<Guid?>("MasterArticleId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<Guid?>("ParentCommentID");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CommentWritorId");

                    b.HasIndex("MasterArticleId");

                    b.HasIndex("ParentCommentID");

                    b.ToTable("ArticleComments");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleCommentTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("RefrenceCount");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("ArticleCommentTag");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleInTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ArticleTopicId");

                    b.Property<Guid?>("MasterArticleId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTopicId");

                    b.HasIndex("MasterArticleId");

                    b.ToTable("ArticleInTopics");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleInType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ArticleTypeId");

                    b.Property<Guid?>("MasterArticleId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("MasterArticleId");

                    b.ToTable("ArticleInTypes");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleRelevance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MasterArticleId");

                    b.Property<Guid?>("RelevanceArticleId");

                    b.HasKey("Id");

                    b.HasIndex("MasterArticleId");

                    b.HasIndex("RelevanceArticleId");

                    b.ToTable("ArticleRelevances");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleRelevanceTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContentTagId");

                    b.Property<Guid?>("MasterArticleId");

                    b.HasKey("Id");

                    b.HasIndex("ContentTagId");

                    b.HasIndex("MasterArticleId");

                    b.ToTable("ArticleRelevanceTags");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<Guid?>("TopicImageId");

                    b.HasKey("Id");

                    b.HasIndex("TopicImageId");

                    b.ToTable("ArticleTopics");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ArticleTypeImageId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentTypeId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeImageId");

                    b.HasIndex("ParentTypeId");

                    b.ToTable("ArticleTypes");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleWithFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("FileId");

                    b.Property<Guid?>("MasterArticleId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MasterArticleId");

                    b.ToTable("ArticleWithFiles");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleWithImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("ImageId");

                    b.Property<bool>("IsTop");

                    b.Property<Guid?>("MasterArticleId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("MasterArticleId");

                    b.ToTable("ArticleWithImages");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleWithVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("MasterArticleId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<Guid?>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("MasterArticleId");

                    b.HasIndex("VideoId");

                    b.ToTable("ArticleWithVideos");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationRoleId");

                    b.Property<int>("DepartmentType");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("OrganizationId");

                    b.Property<Guid?>("ParentDepartmentId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(260);

                    b.Property<string>("AvatarPath");

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CredentialsCode")
                        .HasMaxLength(26);

                    b.Property<Guid?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpiredDateTime");

                    b.Property<Guid?>("JobTitleId");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<bool>("Sex");

                    b.Property<string>("SortCode")
                        .HasMaxLength(100);

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.GradeAndClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationRoleId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ExpiredDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentDepartmentId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("GradeAndClasses");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("JobTitleType");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.Organ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Organs");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("AvatarPath");

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CredentialsCode")
                        .HasMaxLength(26);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpiredDateTime");

                    b.Property<Guid?>("GradeAndClassId");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<bool>("Sex");

                    b.Property<string>("SortCode")
                        .HasMaxLength(100);

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GradeAndClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CloseDate");

                    b.Property<Guid?>("CourseAdministratorId");

                    b.Property<Guid?>("CreatorId");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("SortCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CourseAdministratorId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CourseId");

                    b.Property<Guid?>("CourseItemContentId");

                    b.Property<Guid?>("CreatorId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentCourseItemId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseItemContentId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentCourseItemId");

                    b.ToTable("CourseItems");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseItemContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("EditorId");

                    b.Property<string>("FootContent")
                        .HasMaxLength(500);

                    b.Property<string>("HeadContent")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SecondTitle")
                        .HasMaxLength(200);

                    b.Property<string>("SortCode")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.ToTable("CourseItemContents");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseItemContentWithFiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BusinessFileId");

                    b.Property<Guid>("BusinessImageId");

                    b.Property<Guid>("BusinessVideoId");

                    b.Property<int>("OrderNumber");

                    b.HasKey("Id");

                    b.ToTable("CourseItemContentWithFileses");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseWithRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationRoleId");

                    b.Property<int>("AuthorizationTypeEnum");

                    b.Property<Guid?>("CourseId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseWithRoles");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseWithUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<int>("AuthorizationTypeEnum");

                    b.Property<Guid?>("CourseId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseWithUsers");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.FilesInCourseItemContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CourseItemContentId");

                    b.Property<Guid?>("FileId");

                    b.HasKey("Id");

                    b.HasIndex("CourseItemContentId");

                    b.HasIndex("FileId");

                    b.ToTable("FilesInCourseItemContents");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.ImagesInCourseItemContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CourseItemContentId");

                    b.Property<Guid?>("ImageId");

                    b.HasKey("Id");

                    b.HasIndex("CourseItemContentId");

                    b.HasIndex("ImageId");

                    b.ToTable("ImagesInCourseItemContents");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.ViedosInCourseItemContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CourseItemContentId");

                    b.Property<Guid?>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("CourseItemContentId");

                    b.HasIndex("VideoId");

                    b.ToTable("ViedosInCourseItemContents");
                });

            modelBuilder.Entity("ELearning.UserAndRole.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationRoleType");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(550);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDefaultRole");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("SortCode")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ELearning.UserAndRole.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AvatarPath");

                    b.Property<string>("ChineseFullName")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDefaultUser");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ELearning.Entities.News.Article", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleComment", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "CommentWritor")
                        .WithMany()
                        .HasForeignKey("CommentWritorId");

                    b.HasOne("ELearning.Entities.News.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");

                    b.HasOne("ELearning.Entities.News.ArticleComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentID");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleInTopic", b =>
                {
                    b.HasOne("ELearning.Entities.News.ArticleTopic", "ArticleTopic")
                        .WithMany()
                        .HasForeignKey("ArticleTopicId");

                    b.HasOne("ELearning.Entities.News.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleInType", b =>
                {
                    b.HasOne("ELearning.Entities.News.ArticleType", "ArticleType")
                        .WithMany()
                        .HasForeignKey("ArticleTypeId");

                    b.HasOne("ELearning.Entities.News.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleRelevance", b =>
                {
                    b.HasOne("ELearning.Entities.News.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");

                    b.HasOne("ELearning.Entities.News.Article", "RelevanceArticle")
                        .WithMany()
                        .HasForeignKey("RelevanceArticleId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleRelevanceTag", b =>
                {
                    b.HasOne("ELearning.Entities.News.ArticleCommentTag", "ContentTag")
                        .WithMany()
                        .HasForeignKey("ContentTagId");

                    b.HasOne("ELearning.Entities.News.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleTopic", b =>
                {
                    b.HasOne("ELearning.Entities.Common.BusinessImage", "TopicImage")
                        .WithMany()
                        .HasForeignKey("TopicImageId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleType", b =>
                {
                    b.HasOne("ELearning.Entities.Common.BusinessImage", "ArticleTypeImage")
                        .WithMany()
                        .HasForeignKey("ArticleTypeImageId");

                    b.HasOne("ELearning.Entities.News.ArticleType", "ParentType")
                        .WithMany()
                        .HasForeignKey("ParentTypeId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleWithFile", b =>
                {
                    b.HasOne("ELearning.Entities.Common.BusinessFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("ELearning.Entities.News.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleWithImage", b =>
                {
                    b.HasOne("ELearning.Entities.Common.BusinessImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("ELearning.Entities.News.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");
                });

            modelBuilder.Entity("ELearning.Entities.News.ArticleWithVideo", b =>
                {
                    b.HasOne("ELearning.Entities.News.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");

                    b.HasOne("ELearning.Entities.Common.BusinessVideo", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.Department", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("ELearning.Entities.Organization.Organ", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("ELearning.Entities.Organization.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.Employee", b =>
                {
                    b.HasOne("ELearning.Entities.Organization.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ELearning.Entities.Organization.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.GradeAndClass", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("ELearning.Entities.Organization.GradeAndClass", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");
                });

            modelBuilder.Entity("ELearning.Entities.Organization.Student", b =>
                {
                    b.HasOne("ELearning.Entities.Organization.GradeAndClass", "GradeAndClass")
                        .WithMany()
                        .HasForeignKey("GradeAndClassId");

                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.Course", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "CourseAdministrator")
                        .WithMany()
                        .HasForeignKey("CourseAdministratorId");

                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseItem", b =>
                {
                    b.HasOne("ELearning.Entities.TeachingCourse.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("ELearning.Entities.TeachingCourse.CourseItemContent", "CourseItemContent")
                        .WithMany()
                        .HasForeignKey("CourseItemContentId");

                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("ELearning.Entities.TeachingCourse.CourseItem", "ParentCourseItem")
                        .WithMany()
                        .HasForeignKey("ParentCourseItemId");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseItemContent", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseWithRoles", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("ELearning.Entities.TeachingCourse.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.CourseWithUsers", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ELearning.Entities.TeachingCourse.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.FilesInCourseItemContent", b =>
                {
                    b.HasOne("ELearning.Entities.TeachingCourse.CourseItemContent", "CourseItemContent")
                        .WithMany()
                        .HasForeignKey("CourseItemContentId");

                    b.HasOne("ELearning.Entities.Common.BusinessFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.ImagesInCourseItemContent", b =>
                {
                    b.HasOne("ELearning.Entities.TeachingCourse.CourseItemContent", "CourseItemContent")
                        .WithMany()
                        .HasForeignKey("CourseItemContentId");

                    b.HasOne("ELearning.Entities.Common.BusinessImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("ELearning.Entities.TeachingCourse.ViedosInCourseItemContent", b =>
                {
                    b.HasOne("ELearning.Entities.TeachingCourse.CourseItemContent", "CourseItemContent")
                        .WithMany()
                        .HasForeignKey("CourseItemContentId");

                    b.HasOne("ELearning.Entities.Common.BusinessVideo", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ELearning.UserAndRole.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ELearning.UserAndRole.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
